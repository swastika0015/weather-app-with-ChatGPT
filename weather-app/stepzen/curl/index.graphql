type Current {
  interval: Int
  rain: Int
  snowfall: Int
  temperature_2m: Float
  time: DateTime
}

type CurrentUnits {
  interval: String
  rain: String
  snowfall: String
  temperature_2m: String
  time: String
}

type Daily {
  temperature_2m_max: [Float]
  temperature_2m_min: [Float]
  time: [Date]
  weather_code: [Int]
}

type DailyUnits {
  temperature_2m_max: String
  temperature_2m_min: String
  time: String
  weather_code: String
}

type Hourly {
  dew_point_2m: [Float]
  rain: [Float]
  relative_humidity_2m: [Int]
  showers: [Float]
  snowfall: [Int]
  temperature_2m: [Float]
  time: [DateTime]
  uv_index: [Float]
  uv_index_clear_sky: [Float]
  wind_speed_10m: [Float]
}

type HourlyUnits {
  dew_point_2m: String
  rain: String
  relative_humidity_2m: String
  showers: String
  snowfall: String
  temperature_2m: String
  time: String
  uv_index: String
  uv_index_clear_sky: String
  wind_speed_10m: String
}

type Root {
  current: Current
  current_units: CurrentUnits
  daily: Daily
  daily_units: DailyUnits
  elevation: Int
  generationtime_ms: Float
  hourly: Hourly
  hourly_units: HourlyUnits
  latitude: Float
  longitude: Float
  timezone: String
  timezone_abbreviation: String
  utc_offset_seconds: Int
}

type Query {
  myQuery(
    current: String
    daily: String
    hourly: String
    latitude: String
    longitude: String
    timezone: String
  ): Root @rest(endpoint: "https://api.open-meteo.com/v1/forecast")
}
